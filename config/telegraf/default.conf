###############################################################################
#                            TELEGRAF CONFIG                                  #
###############################################################################

# Global tags can be specified here in key="value" format.
[global_tags]
  host = "$HOSTNAME"

# Configuration for telegraf agent
[agent]
  interval = "5s"
  round_interval = false
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "500ms"
  flush_interval = "10s"
  flush_jitter = "1s"
  precision = "0s"
  log_with_timezone = "America/Los_Angeles"
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Publishes metrics to a postgresql database
[[outputs.postgresql]]
  connection = "postgres://postgres:postgres@${DB_HOSTNAME:-127.0.0.1}:${DB_PORT:-5432}/postgres"
  schema = "telegraf"
  tags_as_foreign_keys = true
# The following templates were taken from this example: https://github.com/influxdata/telegraf/pull/8651
  create_templates = [
      '''CREATE TABLE {{ .table }} ({{ .allColumns }})''',
      '''SELECT create_hypertable({{ .table|quoteLiteral }}, 'time', chunk_time_interval => INTERVAL '1h')''',
      '''ALTER TABLE {{ .table }} SET (timescaledb.compress, timescaledb.compress_segmentby = 'tag_id')''',
      '''SELECT add_compression_policy({{ .table|quoteLiteral }}, INTERVAL '2h')''',
      '''CREATE VIEW {{ .table.WithSuffix "_data" }} AS SELECT {{ .allColumns.Selectors | join "," }} FROM {{ .table }}''',
      '''CREATE VIEW {{ .table.WithSchema "public" }} AS SELECT time, {{ (.tagTable.Columns.Tags.Concat .allColumns.Fields).Identifiers | join "," }} FROM {{ .table.WithSuffix "_data" }} t, {{ .tagTable }} tt WHERE t.tag_id = tt.tag_id''',
  ]
  add_column_templates = [
      '''ALTER TABLE {{ .table }} RENAME TO {{ (.table.WithSuffix "_" .table.Columns.Hash).WithSchema "" }}''',
      '''ALTER VIEW {{ .table.WithSuffix "_data" }} RENAME TO {{ (.table.WithSuffix "_" .table.Columns.Hash "_data").WithSchema "" }}''',
      '''DROP VIEW {{ .table.WithSchema "public" }}''',

      '''CREATE TABLE {{ .table }} ({{ .allColumns }})''',
      '''SELECT create_hypertable({{ .table|quoteLiteral }}, 'time', chunk_time_interval => INTERVAL '1h')''',
      '''ALTER TABLE {{ .table }} SET (timescaledb.compress, timescaledb.compress_segmentby = 'tag_id')''',
      '''SELECT add_compression_policy({{ .table|quoteLiteral }}, INTERVAL '2h')''',
      '''CREATE VIEW {{ .table.WithSuffix "_data" }} AS SELECT {{ .allColumns.Selectors | join "," }} FROM {{ .table }} UNION ALL SELECT {{ (.allColumns.Union .table.Columns).Selectors | join "," }} FROM {{ .table.WithSuffix "_" .table.Columns.Hash "_data" }}''',
      '''CREATE VIEW {{ .table.WithSchema "public" }} AS SELECT time, {{ (.tagTable.Columns.Tags.Concat .allColumns.Fields).Identifiers | join "," }} FROM {{ .table.WithSuffix "_data" }} t, {{ .tagTable }} tt WHERE t.tag_id = tt.tag_id''',
  ]

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# # Get standard chrony metrics, requires chronyc executable.
[[inputs.chrony]]

# Read metrics about cpu usage
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false
  core_tags = false

# Read metrics about disk usage by mount point
[[inputs.disk]]
  # mount_points = ["/"]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# Read metrics about disk IO by device
[[inputs.diskio]]

# Read metrics about memory usage
[[inputs.mem]]

# # Gather metrics about network interfaces
[[inputs.net]]

# # Read TCP metrics such as established, time wait and sockets counts.
[[inputs.netstat]]

# # Collect kernel snmp counters and network interface statistics
[[inputs.nstat]]

# Get the number of processes and group them by status
[[inputs.processes]]
  use_sudo = false

# Read metrics about system load & uptime
[[inputs.system]]

# Read metrics about temperature
[[inputs.temp]]

# Read metrics about wireless network interfaces
[[inputs.wireless]]
