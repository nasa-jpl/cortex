###############################################################################
#                            TELEGRAF CONFIG                                  #
###############################################################################

# Global tags can be specified here in key="value" format.
[global_tags]
  host = "$HOSTNAME"

# Configuration for telegraf agent
[agent]
  interval = "5s"
  round_interval = false
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "500ms"
  flush_interval = "10s"
  flush_jitter = "1s"
  precision = "0s"
  log_with_timezone = "America/Los_Angeles"
  omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Publishes metrics to a postgresql database
[[outputs.postgresql]]
  connection = "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOSTNAME:-127.0.0.1}:${DB_PORT:-5432}/postgres"
  schema = "telegraf"
  tags_as_foreign_keys = true
# The following templates were taken from this example: https://github.com/influxdata/telegraf/pull/8651
  create_templates = [
      '''CREATE TABLE {{ .table }} ({{ .allColumns }})''',
      '''SELECT create_hypertable({{ .table|quoteLiteral }}, 'time', chunk_time_interval => INTERVAL '1h')''',
      '''ALTER TABLE {{ .table }} SET (timescaledb.compress, timescaledb.compress_segmentby = 'tag_id')''',
      '''SELECT add_compression_policy({{ .table|quoteLiteral }}, INTERVAL '2h')''',
      '''CREATE VIEW {{ .table.WithSuffix "_data" }} AS SELECT {{ .allColumns.Selectors | join "," }} FROM {{ .table }}''',
      '''CREATE VIEW {{ .table.WithSchema "public" }} AS SELECT time, {{ (.tagTable.Columns.Tags.Concat .allColumns.Fields).Identifiers | join "," }} FROM {{ .table.WithSuffix "_data" }} t, {{ .tagTable }} tt WHERE t.tag_id = tt.tag_id''',
  ]
  add_column_templates = [
      '''ALTER TABLE {{ .table }} RENAME TO {{ (.table.WithSuffix "_" .table.Columns.Hash).WithSchema "" }}''',
      '''ALTER VIEW {{ .table.WithSuffix "_data" }} RENAME TO {{ (.table.WithSuffix "_" .table.Columns.Hash "_data").WithSchema "" }}''',
      '''DROP VIEW {{ .table.WithSchema "public" }}''',

      '''CREATE TABLE {{ .table }} ({{ .allColumns }})''',
      '''SELECT create_hypertable({{ .table|quoteLiteral }}, 'time', chunk_time_interval => INTERVAL '1h')''',
      '''ALTER TABLE {{ .table }} SET (timescaledb.compress, timescaledb.compress_segmentby = 'tag_id')''',
      '''SELECT add_compression_policy({{ .table|quoteLiteral }}, INTERVAL '2h')''',
      '''CREATE VIEW {{ .table.WithSuffix "_data" }} AS SELECT {{ .allColumns.Selectors | join "," }} FROM {{ .table }} UNION ALL SELECT {{ (.allColumns.Union .table.Columns).Selectors | join "," }} FROM {{ .table.WithSuffix "_" .table.Columns.Hash "_data" }}''',
      '''CREATE VIEW {{ .table.WithSchema "public" }} AS SELECT time, {{ (.tagTable.Columns.Tags.Concat .allColumns.Fields).Identifiers | join "," }} FROM {{ .table.WithSuffix "_data" }} t, {{ .tagTable }} tt WHERE t.tag_id = tt.tag_id''',
  ]


###############################################################################
#                            SERVICE INPUT PLUGINS                            #
###############################################################################

## Parse the new lines appended to all ROS log files. Depends on $ROS_LOG_DIR being set in env
## https://github.com/influxdata/telegraf/blob/master/plugins/inputs/tail/README.md
## https://github.com/elastic/elasticsearch/blob/7.8/libs/grok/src/main/resources/patterns/grok-patterns
[[inputs.tail]]
  name_override = "roslogs"
  files = ["$ROS_LOG_DIR/**.log"]
  character_encoding = "utf-8"
  from_beginning = true
  pipe = false
  interval = "10s"
  collection_jitter = "1s"
  data_format = "grok"
  filters = ["ansi_color"]
  grok_patterns = [
  "\\[%{GREEDYDATA:source}\\]\\[%{LOGLEVEL:level}\\] %{TIMESTAMP_ISO8601:time:ts-\"2006-01-02 15:04:05\"}(?:.|,)(?:[0-9]{3}):(?: topic\\[%{GREEDYDATA:topics}\\] %{GREEDYDATA:message}| %{GREEDYDATA:message})",
  "\\[(?:%{NOTSPACE}|%{SPACE})*%{LOGLEVEL:level}(?:%{NOTSPACE}|%{SPACE})\\] \\[%{NUMBER:timestamp:ts-epoch}(?:, %{NUMBER}|)\\]: %{GREEDYDATA:message}",
  "\\[(?:%{NOTSPACE}|%{SPACE})%{LOGLEVEL:level}(?:%{NOTSPACE}|%{SPACE})\\] \\[%{NUMBER:timestamp:ts-epoch}(?:, %{NUMBER}|)\\](?:\\:|) \\(%{GREEDYDATA:script}:%{NUMBER:lineno}\\) %{GREEDYDATA:message}",
  "%{NUMBER:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:node} \\[%{GREEDYDATA:script}:%{NUMBER:lineno}\\((?:%{GREEDYDATA:func}|%{NOTSPACE})\\)\\] \\[topics: %{GREEDYDATA:topics}\\] %{GREEDYDATA:message}"
  ]
  grok_custom_patterns = '''
    LOGLEVEL (WARN|WARNING|ERROR|FATAL|UNKNOWN)
    '''
  grok_timezone = "America/Los_Angeles"
  path_tag = "filename"
